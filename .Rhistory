attachment::att_amend_desc()
install.packages("attachment")
attachment::att_amend_desc()
install.packages("spatstat.geom")
attachment::att_amend_desc()
devtools::install_deps(dependencies = TRUE)
install.packages("spatstat.geom")
devtools::build()
attachment::att_amend_desc()
devtools::install_deps(dependencies = TRUE)
install.packages("spatstat.geom")
install.packages("spatstat.geom")
devtools::install_github("plevritis/celesta")
devtools::use_git()
?use_git
use_git()
usethis::use_git()
devtools::check_man()
install.packages("spatstat.geom")
devtools::check()
install.packages("spatstat.geom")
install.packages("spatstat.geom")
install.packages("spatstat.geom")
devtools::check()
use_package("ggplot2")
devtools::use_package("ggplot2")
usethis::use_package("ggplot2")
devtools::check()
devtools::build()
devtools::check()
devtools::document()
devtools::document()
devtools::bash()
devtools::build()
devtools::check()
devtools::document()
ls
getwd()
setwd("/Users/jacobchang/Lab")
getwd()
devtools::create("metadisco2")
#' @export
setClass(
"Spomic",
slots = c(
sample = "character",
df = "data.frame",
pp = "ANY",  # Allow any object, including ppp
# null_envelope = "data.frame",
hyperparameters = "list"
),
prototype = list(
pp = NULL,  # Initialize as NULL to avoid undefined slot
results = list()
)
)
#' @export
setClass(
"Spomic",
slots = c(
sample = "character",
df = "data.frame",
pp = "ANY",  # Allow any object, including ppp
# null_envelope = "data.frame",
hyperparameters = "list",
results = "list"
),
prototype = list(
pp = NULL  # Initialize as NULL to avoid undefined slot
)
)
#' @export
validate_columns <- function(df, required_columns) {
missing_columns <- setdiff(required_columns, colnames(df))
if (length(missing_columns) > 0) {
stop(sprintf("Missing required columns: %s", paste(missing_columns, collapse = ", ")))
}
}
#' @export
spomic_to_pp <- function(df) {
xrange <- range(df$x)
yrange <- range(df$y)
pp <- spatstat.geom::ppp(df$x,
df$y,
window = spatstat.geom::owin(xrange, yrange),
marks = factor(df$cell_type))
return(pp)
}
#' @export
create_spomic <- function(p, drop_na = TRUE) {
# Check input type and read data
if (is.character(p)) {
if (!file.exists(p)) stop("File does not exist: ", p)
df <- read.csv(p)
} else if (is.data.frame(p)) {
df <- p
} else {
stop("Input must be a data.frame or path to a CSV file.")
}
if (drop_na) {
df <- tidyr::drop_na(df)
}
if (nrow(df) == 0) stop("Data frame is empty.")
# Validate required columns
required_columns <- c("x", "y", "cell_type", "sample")
validate_columns(df, required_columns)
# Ensure correct column types
if (!is.numeric(df$x) || !is.numeric(df$y)) {
stop("Columns 'x' and 'y' must contain numeric values.")
}
# Ensure `sample` column has a single unique value
unique_samples <- unique(df$sample)
if (length(unique_samples) > 1) {
stop("Data frame contains multiple unique sample IDs. Ensure only one sample per Spomic object.")
}
# Create Spomic object
object <- new("Spomic",
sample = as.character(unique_samples),
df = df,
pp = spomic_to_pp(df),
null_envelope = data.frame(),
hyperparameters = list()
)
return(object)
}
p <- "~/Lab/metadisco_paper/data/filtered_hnscc_whole_slide/primary_node_positive/sample7233filtered.csv"
spomic <- createSpomic(p)
spomic <- create_spomic(p)
p <- "~/Lab/metadisco_paper/data/filtered_hnscc_whole_slide/primary_node_positive/sample7233filtered.csv"
spomic <- create_spomic(p)
#' @export
setClass(
"Spomic",
slots = c(
sample = "character",
df = "data.frame",
pp = "ANY",  # Allow any object, including ppp
# null_envelope = "data.frame",
hyperparameters = "list",
results = "list"
),
prototype = list(
pp = NULL  # Initialize as NULL to avoid undefined slot
)
)
#' @export
validate_columns <- function(df, required_columns) {
missing_columns <- setdiff(required_columns, colnames(df))
if (length(missing_columns) > 0) {
stop(sprintf("Missing required columns: %s", paste(missing_columns, collapse = ", ")))
}
}
#' @export
spomic_to_pp <- function(df) {
xrange <- range(df$x)
yrange <- range(df$y)
pp <- spatstat.geom::ppp(df$x,
df$y,
window = spatstat.geom::owin(xrange, yrange),
marks = factor(df$cell_type))
return(pp)
}
#' @export
create_spomic <- function(p, drop_na = TRUE) {
# Check input type and read data
if (is.character(p)) {
if (!file.exists(p)) stop("File does not exist: ", p)
df <- read.csv(p)
} else if (is.data.frame(p)) {
df <- p
} else {
stop("Input must be a data.frame or path to a CSV file.")
}
if (drop_na) {
df <- tidyr::drop_na(df)
}
if (nrow(df) == 0) stop("Data frame is empty.")
# Validate required columns
required_columns <- c("x", "y", "cell_type", "sample")
validate_columns(df, required_columns)
# Ensure correct column types
if (!is.numeric(df$x) || !is.numeric(df$y)) {
stop("Columns 'x' and 'y' must contain numeric values.")
}
# Ensure `sample` column has a single unique value
unique_samples <- unique(df$sample)
if (length(unique_samples) > 1) {
stop("Data frame contains multiple unique sample IDs. Ensure only one sample per Spomic object.")
}
# Create Spomic object
object <- new("Spomic",
sample = as.character(unique_samples),
df = df,
pp = spomic_to_pp(df),
# null_envelope = data.frame(),
hyperparameters = list(),
results = list()
)
return(object)
}
p <- "~/Lab/metadisco_paper/data/filtered_hnscc_whole_slide/primary_node_positive/sample7233filtered.csv"
spomic <- create_spomic(p)
View(spomic)
spomic@results$dummy <- "dummy"
spomic@results$dummy2 <- data.frame(x = "dummy")
#' #' @export
#' setClass(
#'   "Spomic",
#'   slots = c(
#'     sample = "character",
#'     df = "data.frame",
#'     pp = "ANY",  # Allow any object, including ppp
#'     # null_envelope = "data.frame",
#'     hyperparameters = "list",
#'     results = "list"
#'   ),
#'   prototype = list(
#'     pp = NULL  # Initialize as NULL to avoid undefined slot
#'   )
#' )
#'
#' @export
setClass(
"Spomic",
slots = c(
details = "list",
df = "data.frame",
pp = "ANY",
results = "list"
),
prototype = list(
pp = NULL  # Initialize as NULL to avoid undefined slot
)
)
#' @export
validate_columns <- function(df, required_columns) {
missing_columns <- setdiff(required_columns, colnames(df))
if (length(missing_columns) > 0) {
stop(sprintf("Missing required columns: %s", paste(missing_columns, collapse = ", ")))
}
}
#' @export
spomic_to_pp <- function(df) {
xrange <- range(df$x)
yrange <- range(df$y)
pp <- spatstat.geom::ppp(df$x,
df$y,
window = spatstat.geom::owin(xrange, yrange),
marks = factor(df$cell_type))
return(pp)
}
#' @export
create_spomic <- function(p, drop_na = TRUE) {
# Check input type and read data
if (is.character(p)) {
if (!file.exists(p)) stop("File does not exist: ", p)
df <- read.csv(p)
} else if (is.data.frame(p)) {
df <- p
} else {
stop("Input must be a data.frame or path to a CSV file.")
}
if (drop_na) {
df <- tidyr::drop_na(df)
}
if (nrow(df) == 0) stop("Data frame is empty.")
# Validate required columns
required_columns <- c("x", "y", "cell_type", "sample")
validate_columns(df, required_columns)
# Ensure correct column types
if (!is.numeric(df$x) || !is.numeric(df$y)) {
stop("Columns 'x' and 'y' must contain numeric values.")
}
# Ensure `sample` column has a single unique value
unique_samples <- unique(df$sample)
if (length(unique_samples) > 1) {
stop("Data frame contains multiple unique sample IDs. Ensure only one sample per Spomic object.")
}
# Create Spomic object
# object <- new("Spomic",
#               sample = as.character(unique_samples),
#               df = df,
#               pp = spomic_to_pp(df),
#               # null_envelope = data.frame(),
#               hyperparameters = list(),
#               results = list()
# )
object <- new("Spomic",
details = list(),
df = df,
pp = spomic_to_pp,
results = list()
)
object@details$sample <- unique(object@df$sample)
object@details$hyperparameters <- list()
return(object)
}
p <- "~/Lab/metadisco_paper/data/filtered_hnscc_whole_slide/primary_node_positive/sample7233filtered.csv"
spomic <- create_spomic(p)
View(spomic)
plotCellPair(spomic, cellA = "Epithelial", cellB = "Fibroblast")
plotKDE(spomic, cell = "Epithelial")
